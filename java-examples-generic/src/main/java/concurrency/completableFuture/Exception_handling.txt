We explored How to create CompletableFuture, transform them, and combine multiple CompletableFutures.
 Now let’s understand what to do when anything goes wrong.

Let’s first understand how errors are propagated in a callback chain.
 Consider the following CompletableFuture callback chain -

CompletableFuture.supplyAsync(() -> {
	// Code which might throw an exception
	return "Some result";
}).thenApply(result -> {
	return "processed result";
}).thenApply(result -> {
	return "result after further processing";
}).thenAccept(result -> {
	// do something with the final result
});
If an error occurs in the original supplyAsync() task, then none of the thenApply() callbacks
will be called and future will be resolved with the exception occurred.

If an error occurs in first thenApply() callback then 2nd and 3rd callbacks won’t be called
 and the future will be resolved with the exception occurred, and so on.