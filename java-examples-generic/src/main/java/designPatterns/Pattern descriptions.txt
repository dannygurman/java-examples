Adapter -          Wraps an object and provides a different interface to it.

Template Method  - Subclasses decide how to implement steps in an algorithm.


Factory Method - Subclasses decide which concrete classes to create.


Singleton - Ensures one and only object is created.


Strategy - Encapsulates interchangeable behaviors and uses delegation to decide which one to use.


Composite - Clients treat collections of objects and individual objects uniformly.


State - Encapsulates state-based behaviors and uses delegation to switch between behaviors.


Iterator - Provides a way to traverse a collection of objects without exposing its implementation.


Facade - Simplifies the interface of a set of classes.


Decorator - Wraps an object to provide new behavior.


Abstract Factory - Allows a client to create families of objects without specifying their concrete classes.


Observer - Allows objects to be notified when state changes.


Proxy - Wraps an object to control access to it.


Command - Encapsulates a request as an object.