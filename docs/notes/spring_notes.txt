@ConditionalOnProperty
Conditional that checks if the specified properties have a specific value.
By default the properties must be present in the Environment and not equal to false.
The havingValue() and matchIfMissing() attributes allow further customizations.
The havingValue() attribute can be used to specify the value that the property should have.
Example:
@Component
@ConditionalOnProperty(value = "message.persistence", havingValue = "elastic")
public class AppWallLearningService extends AppWallSaveOrUpdateService<AppWallLearningEventMessage> {

}

@ConditionalOnExpression
Configuration annotation for a conditional element that depends on the value of a SpEL expression
Example:
@Component
@ConditionalOnExpression("'${elasticsearch}' != 'none'")
public class DFElasticsearchIndexInitializer extends ElasticsearchIndexInitializerBase<DF> {

}


@Qualifier
here may be a situation when you create more than one bean of the same type and want to wire only
 one of them with a property.
 In such cases, you can use the @Qualifier annotation along with @Autowired to remove the confusion by specifying which exact bean will be wired.
Example:
@Autowired
@Qualifier("requestsGauge")
private Gauge parallelRequests;

@Bean(name = "requestsGauge")
public Gauge requestsGauge(){



@Primary
Indicates that a bean should be given preference when multiple candidates are qualified to autowire a single-valued dependency.
If exactly one 'primary' bean exists among the candidates, it will be the autowired value
May be used on any class directly or indirectly annotated with @Component or on methods annotated with @Bean.
Example:
@Primary
@Component
public class VisionAlertServiceClientMock extends VisionAlertServiceClient

@Scope("prototype")
When used as a type-level annotation in conjunction with @Component, @Scope indicates the name of a scope to use for instances of the annotated type.
When used as a method-level annotation in conjunction with @Bean, @Scope indicates the name of a scope to use for the instance returned from the method.

Defaults to an empty string ("") which implies SCOPE_SINGLETON.

ConfigurableBeanFactory.SCOPE_PROTOTYPE,- Scopes a single bean definition to any number of object instances.
ConfigurableBeanFactory.SCOPE_SINGLETON,- Scopes a single bean definition to a single object instance per Spring IoC container.
WebApplicationContext.SCOPE_REQUEST - Scopes a single bean definition to the lifecycle of a single HTTP request
 WebApplicationContext.SCOPE_SESSION- Scopes a single bean definition to the lifecycle of a HTTP Session


 Autowiting list - all matching beans in the context
  @Autowired
     private List<EventParser> parsers;

ApplicationContextInitializer
   void initialize(C var1);

ApplicationListener - ApplicationListener
SpringBootServletInitializer

ApplicationContext

@Primary
used bt DAO - no EntityManager
JpaRepository<ConfigurationSyncSettings, Long>

Resolver

onApplicationEvent - ApplicationListener

actuater
@Value