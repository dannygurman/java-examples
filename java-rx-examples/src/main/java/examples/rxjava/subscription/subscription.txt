Subscription returns from Observable.subscribe(Subscriber) to allow unsubscribing.

From Observable:
public final Subscription subscribe()
or another example:
 public final Subscription subscribe(Action1<? super T> onNext, Action1<Throwable> onError, Action0 onCompleted) {




https://blog.mindorks.com/rxjava-anatomy-what-is-rxjava-how-rxjava-is-designed-and-how-rxjava-works-d357b3aca586

Subscription:
 When the Subscriber becomes ready to start handling events, it signals the Publisher through its Subscription
Note:
To avoid the name clash, the RxJava 1 rx.Subscription has been renamed into io.reactivex.Disposable in RxJava 2.


public interface Subscription {
    public void request(long n); //request n items
    public void cancel();
}



See the utilities in Subscriptions and the implementations in the rx.subscriptions package.