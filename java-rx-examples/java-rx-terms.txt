1. Publisher: These interfaces(APIs) define the structure of RxJava.
public interface Publisher<T> {
    public void subscribe(Subscriber<? super T> s);
}



2.Subscriber: A Subscriber exposes the following callback methods.

public interface Subscriber<T> {
   //signals to the Publisher to start sending events
    public void onSubscribe(Subscription s);

    public void onNext(T t);
    public void onError(Throwable t);
    public void onComplete();
}


3. Subscription/Disposable : When the Subscriber becomes ready to start handling events,
it signals the Publisher through its Subscription
 RxJava 1 rx.Subscription -> io.reactivex.Disposable in RxJava 2.

 public interface Disposable {
     void dispose();

     boolean isDisposed();
 }


 Upon receiving this signal, the Publisher begins to invoke Subscriber::onNext(T)for each event T.
  This continues until either completion of the stream (Subscriber::onComplete())
   or an error occurs during processing (Subscriber::onError(Throwable)).


4. Processor/Subjects: It represents a processing stageâ€”which is both a Subscriber and a Publisher and obeys the contracts of both.
package org.reactivestreams;

public interface Processor<T, R> extends Subscriber<T>, Publisher<R> {

}
In the Reactive-Streams specification, the Subject-like behavior,
namely being a consumer and supplier of events at the same time, is done by the Processor interface.

 public abstract class Subject<T> extends Observable<T> implements Observer<T> {

Subject does bot support backpressure

 io.reactivex.subjects.AsyncSubject,
  io.reactivex.subjects.BehaviorSubject,
   io.reactivex.subjects.PublishSubject,
    io.reactivex.subjects.ReplaySubject

   The io.reactivex.processors.AsyncProcessor
   , io.reactivex.processors.BehaviorProcessor
   , io.reactivex.processors.PublishProcessor
   , io.reactivex.processors.ReplayProcessor
   io.reactivex.processors.UnicastProcessor
   are backpressure-aware