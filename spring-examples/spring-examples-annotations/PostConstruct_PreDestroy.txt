---------------------------
When we configure Spring Beans using dependency injection, sometimes we want to make sure everything is
initialized properly before our bean starts serving the client requests.
Similarly, when the context is destroyed, we may have to close some resources used by spring bean.

When we annotate a method in Spring Bean with @PostConstruct annotation, it gets executed
after the spring bean is initialized.
-----------------
We can have only one method annotated with @PostConstruct annotation. This annotation is part of Common Annotations API
 and it’s part of JDK module javax.annotation-api.
  So if you are using this annotation in Java 9 or above, you will have to explicitly add this jar to your project.
  If you are using maven, then below dependency should be added to it.
<dependency>
	<groupId>javax.annotation</groupId>
	<artifactId>javax.annotation-api</artifactId>
	<version>1.3.2</version>
</dependency>
If you are on Java 8 or lower version, then you won’t have to add above dependency.

-----------------------------------
Spring @PreDestroy
When we annotate a Spring Bean method with PreDestroy annotation, it gets called when bean instance is getting removed
from the context.
This is a very important point to understand – if your spring bean scope is “prototype”
then it’s not completely managed by the spring container and PreDestroy method won’t get called.

If there is a method named 'shutdown' or 'close' then spring container will try
 to automatically configure them as callback methods when bean is being destroyed.

 Spring @PostConstruct and @PreDestroy with Prototype Scope
 -------------------------------------------------------
 pring container is initializing the bean on every request, calling its @PostConstruct method and then handing
  it over to the client.
   Spring is not managing the bean after that and in this case
   , the client has to perform all the resource cleanup by directly calling the PreDestroy method.
