Service Locator in Spring
Spring’s ServiceLocatorFactoryBean is a FactoryBean implementation that takes a
service locator interface(Service Factory in service locator parlance)
and returns a service requested by the client.

 It encapsulates all the design components of the service locator pattern and provides a clean
 API to the client to fetch objects on demand.

 @Bean("parserFactory")
  public FactoryBean serviceLocatorFactoryBean() {
    ServiceLocatorFactoryBean factoryBean = new ServiceLocatorFactoryBean();
    factoryBean.setServiceLocatorInterface(ParserFactory.class);
    return factoryBean;
  }

ParserFactory - is the ServiceLocatorInterface


First, let’s define our service locator interface ParserFactory.
 It has a method that takes a content type argument and returns objects of type Parser.

public interface ParserFactory {

  Parser getParser(ContentType contentType);
}

Next we’ll configure the ServiceLocatorFactoryBean to use  ParserFactory as the service locator interface.

@Configuration
public class ParserConfig {

  @Bean("parserFactory")
  public FactoryBean serviceLocatorFactoryBean() {
    ServiceLocatorFactoryBean factoryBean = new ServiceLocatorFactoryBean();
    factoryBean.setServiceLocatorInterface(ParserFactory.class);
    return factoryBean;
  }
}

Behind The Scenes
The ServiceLocatorFactoryBean is a FactoryBean.
 It is used as a factory for Parser objects, and not as a bean itself.
The Spring container creates a dynamic proxy at runtime that delegates to
the underlying BeanFactory for returning the beans.

The Service-Locator-using-Spring-2.png sequence diagram  shows  the story behind the abstraction:

Let’s talk about the factory method getParser.
 public interface ParserFactory {
     Parser getParser(ContentType contentType);
 }

 A factory method argument must be a string, but can also be an integer or an enumeration.
In the latter cases, the bean factory resolves the bean by stringify-ing (for example via toString) the value.
So, we’ll align the bean name of our parsers such that the bean factory
can resolve them via the ContentType enumeration.

We have autowired ParserFactory that takes care of providing the parsers on demand.
There’s no switch/if block!


If we wish to have better control over the bean names, we can simply override the toString method o
f the enumeration and provide custom names.

public enum ContentType {
  JSON(TypeConstants.JSON_PARSER),
  CSV(TypeConstants.CSV_PARSER),
  XML(TypeConstants.XML_PARSER);

  private final String parserName;

  ContentType(String parserName) {
    this.parserName = parserName;
  }

  @Override
  public String toString() {
    return this.parserName;
  }

  public interface TypeConstants {
    String CSV_PARSER = "csvParser";
    String JSON_PARSER = "jsonParser";
    String XML_PARSER = "xmlParser";
  }
}
Also, we’ll refer the same in the implementation classes.

@Component(TypeConstants.CSV_PARSER)
public class CSVParser implements Parser { .. }

@Component(TypeConstants.JSON_PARSER)
public class JSONParser implements Parser { .. }

@Component(TypeConstants.XML_PARSER)
public class XMLParser implements Parser { .. }


Summary
We have implemented a nifty way to extend Spring’s inversion of control by using the service locator pattern.
It helped us address a use case where dependency injection didn’t offer an optimal solution.
That said, dependency injection is still the preferred option and service locator
 should NOT be used to replace dependency injection in most situation