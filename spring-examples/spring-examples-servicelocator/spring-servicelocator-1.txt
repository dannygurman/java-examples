Overview:
--------------
Spring has concepts such as Inversion of Control (IoC),
and dependency injection (constructor, setter and field injection) as a way to achieve IoC.
 Additionally, Spring provides a form of IoC via the service locator pattern.

The service locator pattern has the same goal as dependency injection.
 It removes the dependency that a client has on the concrete implementation.

 The following quote from Martin Fowler’s article summaries the core idea:
 “The basic idea behind a service locator is to have an object that knows
 how to get hold of all of the services that an application might need.
  So a service locator for this application would have a method that returns a ‘service’ when one is needed.”

  Design Components
  See Service-Locator-Pattern-using-Spring.png represents the relationship between the design components of
  service locator:

  Client: Consumer that requires the service at runtime.
  Service Locator: Service locator is responsible for returning the service on-demand to the client.
   It abstracts the lookup or creation of the service.
  Initial Context: It creates, registers and caches the service. This is the starting point of the lookup and creation.
  Service Factory: The service factory provides lifecycle management for the service with support
  to create, lookup, or remove a service.
  Service: Concrete implementation of the service desired by the client.


