Register a Properties File via Annotations
-------------------------------------

Spring 3.1 also introduces the new @PropertySource annotation as a convenient mechanism for
adding property sources to the environment.
We can use this annotation in conjunction with the @Configuration annotation:

@Configuration
@PropertySource("classpath:foo.properties")
public class PropertiesWithJavaConfig {
    //...
}
Another very useful way to register a new properties file is using a placeholder, which allows us to
dynamically select the right file at runtime:
@PropertySource({
  "classpath:persistence-${envTarget:mysql}.properties"
})
...
Defining Multiple Property Locations
The @PropertySource annotation is repeatable according to Java 8 conventions.
Therefore, if we're using Java 8 or higher, we can use this annotation to define multiple property locations:

@PropertySource("classpath:foo.properties")
@PropertySource("classpath:bar.properties")
public class PropertiesWithJavaConfig {
    //...
}
Of course, we can also use the @PropertySources annotation and specify an array of @PropertySource.
 This works in any supported Java version, not just in Java 8 or higher:
@PropertySources({
    @PropertySource("classpath:foo.properties"),
    @PropertySource("classpath:bar.properties")
})
public class PropertiesWithJavaConfig {
    //...
}
In either case, it's worth noting that in the event of a property name collision, the last source read takes precedence.


Using/Injecting Properties
=============================================
Injecting a property with the @Value annotation is straightforward:

@Value( "${jdbc.url}" )
private String jdbcUrl;
We can also specify a default value for the property:

@Value( "${jdbc.url:aDefaultUrl}" )
private String jdbcUrl;

Finally, we can obtain the value of a property using the Environment API:

@Autowired
private Environment env;
...
dataSource.setUrl(env.getProperty("jdbc.url"));


Properties With Spring Boot
--------------------------------
new support involves less configuration compared to standard Spring, which is of course one of the main goals of Boot.


application.properties: the Default Property File
----
Boot applies its typical convention over configuration approach to property files.
 This means that we can simply put an application.properties file in our src/main/resources directory,
  and it will be auto-detected.
   We can then inject any loaded properties from it as normal.

So, by using this default file, we don’t have to explicitly register a PropertySource
 or even provide a path to a property file.

 We can also configure a different file at runtime if we need to, using an environment property:
java -jar app.jar --spring.config.location=classpath:/another-location.properties

As of Spring Boot 2.3, we can also specify wildcard locations for configuration files.
For example, we can set the spring.config.location property to config/*/:
java -jar app.jar --spring.config.location=config/*/
This way, Spring Boot will look for configuration files matching the config/*/ directory pattern outside of our jar file.
This comes in handy when we have multiple sources of configuration properties.

Environment-Specific Properties File
=========================
If we need to target different environments, there's a built-in mechanism for that in Boot.
We can simply define an application-environment.properties file in the src/main/resources directory,
and then set a Spring profile with the same environment name.
For example, if we define a “staging” environment, that means we'll have to define a staging profile
and then application-staging.properties.
This env file will be loaded and will take precedence over the default property file.
Note that the default file will still be loaded, it's just that when there is a property collision,
the environment-specific property file takes precedence.

Test-Specific Properties File
--------------------------------------------
We might also have a requirement to use different property values when our application is under test.
Spring Boot handles this for us by looking in our src/test/resources directory during a test run.
Again, default properties will still be injectable as normal but will be overridden by these if there is a collision.




The @TestPropertySource Annotation
=======================================================
If we need more granular control over test properties, then we can use the @TestPropertySource annotation.
This allows us to set test properties for a specific test context, taking precedence over the default property sources:

@RunWith(SpringRunner.class)
@TestPropertySource("/foo.properties")
public class FilePropertyInjectionUnitTest {

    @Value("${foo}")
    private String foo;

    @Test
    public void whenFilePropertyProvided_thenProperlyInjected() {
        assertThat(foo).isEqualTo("bar");
    }
}

If we don't want to use a file, we can specify names and values directly:
@RunWith(SpringRunner.class)
@TestPropertySource(properties = {"foo=bar"})
public class PropertyInjectionUnitTest {
    @Value("${foo}")
    private String foo;

    @Test
    public void whenPropertyProvided_thenProperlyInjected() {
        assertThat(foo).isEqualTo("bar");
    }
}
We can also achieve a similar effect using the properties argument of the @SpringBootTest annotation:
@RunWith(SpringRunner.class)
@SpringBootTest(properties = {"foo=bar"}, classes = SpringBootPropertiesTestApplication.class)
public class SpringBootPropertyInjectionIntegrationTest {
    @Value("${foo}")
    private String foo;

    @Test
    public void whenSpringBootPropertyProvided_thenProperlyInjected() {
        assertThat(foo).isEqualTo("bar");
    }
}

Hierarchical Properties
===================
If we have properties that are grouped together, we can make use of the @ConfigurationProperties annotation,
 which will map these property hierarchies into Java objects graphs.

Let's take some properties used to configure a database connection:
database.url=jdbc:postgresql:/localhost:5432/instance
database.username=foo
database.password=bar

And then let's use the annotation to map them to a database object:

@ConfigurationProperties(prefix = "database")
public class Database {
    String url;
    String username;
    String password;

    // standard getters and setters
}
Spring Boot applies it's convention over configuration approach again, automatically mapping between property
 names and their corresponding fields. All that we need to supply is the property prefix.

database.url=jdbc:postgresql:/localhost:5432/instance
database.username=foo
database.password=bar
secret: foo

SEE configurationProperties.2.txt

Importing Additional Configuration Files
====================================================
In updated spring ersion, we can use the spring.config.import property within the application.properties or a
application.yml file to easily include additional files.
This property supports some interesting features:
adding several files or directories
the files can be loaded either from the classpath or from an external directory
indicating if the startup process should fail if a file is not found, or if it's an optional file
importing extensionless files
Let's see a valid example:

spring.config.import=classpath:additional-application.properties,
classpath:additional-application[.yml],
optional:file:./external.properties,
classpath:additional-application-properties/

Properties From Command Line Arguments
=================================
Besides using files, we can pass properties directly on the command line:
java -jar app.jar --property="value"
We can also do this via system properties, which are provided before the -jar command rather than after it:
java -Dproperty.name="value" -jar app.jar

Properties From Environment Variables
-------------------------------------------------
Spring Boot will also detect environment variables, treating them as properties:
export name=value
java -jar app.jar

Configuration Using Raw Beans — the PropertySourcesPlaceholderConfigurer
----------------------------------------------------------------
Besides the convenient methods of getting properties into Spring, we can also define and regiter
the property configuration bean manually.

Working with the PropertySourcesPlaceholderConfigurer gives us full control over the configuration,
with the downside of being more verbose and most of the time, unnecessary.

Let's see how we can define this bean using Java configuration:

@Bean
public static PropertySourcesPlaceholderConfigurer properties(){
    PropertySourcesPlaceholderConfigurer pspc
      = new PropertySourcesPlaceholderConfigurer();
    Resource[] resources = new ClassPathResource[ ]
      { new ClassPathResource( "foo.properties" ) };
    pspc.setLocations( resources );
    pspc.setIgnoreUnresolvablePlaceholders( true );
    return pspc;
}

------------------------
