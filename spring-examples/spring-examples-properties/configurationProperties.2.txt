hibernate-validator
------------------------------
To be able to validate properties defined in the file, we also need an implementation of JSR-303,
 and hibernate-validator is one of them.
Let's add it to our pom.xml as well:
<dependency>
   <groupId>org.hibernate</groupId>
   <artifactId>hibernate-validator</artifactId>
   <version>6.0.16.Final</version>
</dependency>

Simple Properties
---------------------------------------------
The official documentation advises that we isolate configuration properties into separate POJOs.

So let's start by doing that:
@Configuration
@ConfigurationProperties(prefix = "mail")
public class ConfigProperties {

    private String hostName;
    private int port;
    private String from;

    // standard getters and setters
}
We use @Configuration so that Spring creates a Spring bean in the application context.

@ConfigurationProperties works best with hierarchical properties that all have the same prefix;
therefore, we add a prefix of mail.

The Spring framework uses standard Java bean setters, so we must declare setters for each of the properties.

Note: If we don't use @Configuration in the POJO, then we need to add
@EnableConfigurationProperties(ConfigProperties.class) in the main Spring application class to bind the properties into the POJO:
@SpringBootApplication
@EnableConfigurationProperties(ConfigProperties.class)
public class EnableConfigurationDemoApplication {
    public static void main(String[] args) {
        SpringApplication.run(EnableConfigurationDemoApplication.class, args);
    }
}

Spring uses some relaxed rules for binding properties. As a result, the following variations are all bound to the property hostName:
mail.hostName
mail.hostname
mail.host_name
mail.host-name
mail.HOST_NAME
Therefore, we can use the following properties file to set all the fields:
#Simple properties
mail.hostname=host@mail.com
mail.port=9000
mail.from=mailer@mail.com

Spring Boot 2.2
-----------------------------
As of Spring Boot 2.2, Spring finds and registers @ConfigurationProperties classes via classpath scanning.
Therefore, there is no need to annotate such classes with @Component (and other meta-annotations like @Configuration),
or even use the @EnableConfigurationProperties:

@ConfigurationProperties(prefix = "mail")
public class ConfigProperties {
    private String hostName;
    private int port;
    private String from;

    // standard getters and setters
}

The classpath scanner enabled by @SpringBootApplication finds the ConfigProperties class,
 even though we didn't annotate this class with @Component.

In addition, we can use the @ConfigurationPropertiesScan annotation to scan custom locations for
configuration property classes:
@SpringBootApplication
@ConfigurationPropertiesScan("com.x.configurationproperties")
public class EnableConfigurationDemoApplication {

    public static void main(String[] args) {
        SpringApplication.run(EnableConfigurationDemoApplication.class, args);
    }
}
This way Spring will look for configuration property classes only in the com.x.properties package.

Nested Properties
---------------------------------------
We can have nested properties in Lists, Maps, and Classes.
Let'S create a new Credentials class to use for some nested properties:

public class Credentials {
    private String authMethod;
    private String username;
    private String password;

    // standard getters and setters
}
We also need to update the ConfigProperties class to use a List, a Map, and the Credentials class:

public class ConfigProperties {

    private String host;
    private int port;
    private String from;
    private List<String> defaultRecipients;
    private Map<String, String> additionalHeaders;
    private Credentials credentials;

    // standard getters and setters
}
The following properties file will set all the fields:
#Simple properties
mail.hostname=mailer@mail.com
mail.port=9000
mail.from=mailer@mail.com
#List properties
mail.defaultRecipients[0]=admin@mail.com
mail.defaultRecipients[1]=owner@mail.com
#Map Properties
mail.additionalHeaders.redelivery=true
#Object properties
mail.credentials.username=john
mail.credentials.password=password

Using @ConfigurationProperties on a @Bean Method
---------------------------------------------------
We can also use the @ConfigurationProperties annotation on @Bean-annotated methods.

This approach may be particularly useful when we want to bind properties to a third-party
component that's outside of our control.
Let's create a simple Item class that we'll use in the next example:

public class Item {
    private String name;
    private int size;

    // standard getters and setters
}
Now let's see how we can use @ConfigurationProperties on a @Bean method to
bind externalized properties to the Item instance:

@Configuration
public class ConfigProperties {

    @Bean
    @ConfigurationProperties(prefix = "item")
    public Item item() {
        return new Item();
    }
}
Consequently, any item-prefixed property will be mapped to the Item instance managed by the Spring context.

Property Validation
--------------------------------
@ConfigurationProperties provides validation of properties using the JSR-303 format.

For example, let's make the hostName property mandatory:
@NotBlank
private String hostName;

Next, let's make the authMethod property from 1 to 4 characters long:
@Length(max = 4, min = 1)
private String authMethod;

Then the port property from 1025 to 65536:
@Min(1025)
@Max(65536)
private int port;

Finally, the from property must match an email address format:
@Pattern(regexp = "^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,6}$")
private String from;
This helps us reduce a lot of if â€“ else conditions in our code, and makes it look much cleaner and more concise.

If any of these validations fail, then the main application would fail to start with an IllegalStateException.
The Hibernate Validation framework uses standard Java bean getters and setters,
so it's important that we declare getters and setters for each of the properties.

Property Conversion
------------------------------------------------
@ConfigurationProperties supports conversion for multiple types of binding the properties to their corresponding beans.

Duration
---------
We'll start by looking at converting properties into Duration objects.

Here we have two fields of type Duration:
@ConfigurationProperties(prefix = "conversion")
public class PropertyConversion {
    private Duration timeInDefaultUnit;
    private Duration timeInNano;
    ...
}
This is our properties file:
conversion.timeInDefaultUnit=10
conversion.timeInNano=9ns
As a result, the field timeInDefaultUnit will have a value of 10 milliseconds,
and timeInNano will have a value of 9 nanoseconds.
The supported units are ns, us, ms, s, m, h and d for nanoseconds, microseconds, milliseconds, seconds,
minutes, hours, and days, respectively.
The default unit is milliseconds.

We can also override the default unit using @DurationUnit:
@DurationUnit(ChronoUnit.DAYS)
private Duration timeInDays;
This is the corresponding property:
conversion.timeInDays=2

DataSize
-----------
Similarly, Spring Boot @ConfigurationProperties supports DataSize type conversion.
Let's add three fields of type DataSize:
private DataSize sizeInDefaultUnit;
private DataSize sizeInGB;

@DataSizeUnit(DataUnit.TERABYTES)
private DataSize sizeInTB;

These are the corresponding properties:
conversion.sizeInDefaultUnit=300
conversion.sizeInGB=2GB
conversion.sizeInTB=4
In this case, the sizeInDefaultUnit value will be 300 bytes, as the default unit is bytes.
The supported units are B, KB, MB, GB, and TB. We can also override the default unit using @DataSizeUnit.

Custom Converter
------------
We can also add our own custom Converter to support converting a property to a specific class type.
Let's add a simple class Employee:

public class Employee {
    private String name;
    private double salary;
}
Then we'll create a custom converter to convert this property:
conversion.employee=john,2000
We will convert it to a file of type Employee:

private Employee employee;
We will need to implement the Converter interface, t
Then use @ConfigurationPropertiesBinding annotation to register our custom Converter:

@Component
@ConfigurationPropertiesBinding
public class EmployeeConverter implements Converter<String, Employee> {

    @Override
    public Employee convert(String from) {
        String[] data = from.split(",");
        return new Employee(data[0], Double.parseDouble(data[1]));
    }
}

Immutable @ConfigurationProperties Binding
-----------
As of Spring Boot 2.2, we can use the @ConstructorBinding annotation to bind our configuration properties.
This essentially means that @ConfigurationProperties-annotated classes may now be immutable.

@ConfigurationProperties(prefix = "mail.credentials")
@ConstructorBinding
public class ImmutableCredentials {

    private final String authMethod;
    private final String username;
    private final String password;

    public ImmutableCredentials(String authMethod, String username, String password) {
        this.authMethod = authMethod;
        this.username = username;
        this.password = password;
    }

    public String getAuthMethod() {
        return authMethod;
    }

    public String getUsername() {
        return username;
    }

    public String getPassword() {
        return password;
    }
}
As we can see, when using @ConstructorBinding, we need to provide the constructor with all the parameters we'd like to bind.
Note that all the fields of ImmutableCredentials are final. Also, there are no setter methods.

Furthermore, it's important to emphasize that to use the constructor binding, we need to explicitly enable our
configuration class either with @EnableConfigurationProperties or with @ConfigurationPropertiesScan.




